import html
from aiogram.filters import Command
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.bot.keyboards.profile import profile_settings_keyboard, change_settings
from src.db.enums_class import GPTConfig, CLAUDEConfig
from src.db.orm.config_orm import ConfigORM
from src.db.orm.user_orm import UserORM, PremiumUserORM
from src.utils.cached_user import _cached_user, change_settings_cache
from src.utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@router.message(Command("profile"))
async def profile_handler(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        key = f"{user_id}:user"

        user_info = await _cached_user(key, user_id)

        if user_info is None:
            await UserORM.create_user(user_id)
            user_info = await _cached_user(key, user_id)

        if not user_info.get("check_premium"):
            await message.answer(
                f"üë§–ü—Ä–æ—Ñ–∏–ª—å: {html.escape(message.from_user.username)}\n\n"
                f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user_info.get("energy", 0)}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è: {user_info.get("counts", 0)}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–æ–¥–ø–∏—Å–æ–∫: {user_info.get("referral_bonus", 0)}‚ÇΩ\n"
                f"‚ùå PRO-–¥–æ—Å—Ç—É–ø: –ù–ï–¢!\n\n"
                f"üîí –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ë–µ–∑ PRO –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.\n\n"
                "<u>–ß—Ç–æ –¥–∞—ë—Ç PRO:</u>\n\n"
                "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π ChatGPT –∏ Claude ‚Äì –Ω–∏–∫–∞–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤, –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
                "‚ö° +2500 —ç–Ω–µ—Ä–≥–∏–∏ ‚Äì –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
                "üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫, –≤—Å—ë –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
                "ü§ñ –î–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º ‚Äì –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ç—Ä–µ–Ω–¥—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∑–∞—Ä–∞–±–æ—Ç–æ–∫\n\n"
                "üí• –°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ PRO ‚Äì —ç—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏.\n\n",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üí≥ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ PRO", callback_data="/PRO"
                            ),
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"
                            ),
                        ],
                    ]
                ),
            )
        else:
            await message.answer(
                f"üë§–ü—Ä–æ—Ñ–∏–ª—å: {html.escape(message.from_user.username)}\n\n"
                f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user_info.get("energy", 0)}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è: {user_info.get("counts", 0)}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø–æ–¥–ø–∏—Å–æ–∫: {user_info.get("referral_bonus", 0)}‚ÇΩ\n"
                f"‚úÖ PRO-–¥–æ—Å—Ç—É–ø: –ï–°–¢–¨!(–ê–∫—Ç–∏–≤–µ–Ω –¥–æ {user_info.get("premium_to_date")})\n\n"
                f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:\n"
                "üîπ /subscription ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                "üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å Woome AI!\n\n"
                "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n"
                "‚úîÔ∏è +20‚ö° —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ\n"
                "‚úîÔ∏è 180 ‚ÇΩ —Å –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n\n"
                "üì¢ –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äì —Ç–µ–º –±–æ–ª—å—à–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞!\n"
                "üëâ /invite ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"
                            ),
                        ]
                    ]
                ),
            )
    except Exception as e:
        logger.error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")


@router.callback_query(F.data == "settings")
async def settings_callback(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""

    await callback.message.answer(
        "`–ú–æ–¥–µ–ª—å: –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è`\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        parse_mode="Markdown",
        reply_markup=await profile_settings_keyboard(callback.from_user.id),
    )


@router.callback_query(F.data.startswith("change_"))
async def process_change_button(callback: types.CallbackQuery):
    choice = callback.data

    if choice == "change_chatgpt":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Chat GPT
        await callback.message.edit_reply_markup(
            reply_markup=await change_settings(callback.from_user.id, "gpt")
        )

    elif choice == "change_claude":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Claude
        await callback.message.edit_reply_markup(
            reply_markup=await change_settings(callback.from_user.id, "claude")
        )


@router.callback_query(F.data.startswith("setting_"))
async def change_model_settings(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    _, model_type, model_value = data.split("_", 2)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É "_"

    try:
        if model_type == "gpt":
            change_setting = GPTConfig(model_value)
            await change_settings_cache(user_id, "gpt", model_value)

        elif model_type == "claude":
            change_setting = CLAUDEConfig(model_value)
            await change_settings_cache(user_id, "claude", model_value)

        else:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏")
            return
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        return

    user_config = await ConfigORM.change_config(user_id, change_setting=change_setting)

    if user_config:
        new_kb = await profile_settings_keyboard(user_id)
        await callback.message.edit_reply_markup(reply_markup=new_kb)
        await callback.answer(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {model_value}")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
