from aiogram.filters import Command
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from src.db.orm.user_orm import UserORM
from src.utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@router.message(Command("profile"))
async def profile_handler(message: types.Message, state: FSMContext):
    try:
        profile_info = await UserORM.get_user(message.from_user.id)
        referrals = await UserORM.get_count_referrals(message.from_user.id)

        await message.answer(
            f"*üë§ –ü—Ä–æ—Ñ–∏–ª—å {message.from_user.username}:*\n\n"
            f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {profile_info.energy}\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {referrals} —á–µ–ª–æ–≤–µ–∫\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ /invite!",

            parse_mode="Markdown",
        )
    except Exception as e:
        logger.error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
