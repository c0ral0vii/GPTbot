from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.bot.keyboards.main_menu import main_menu_kb
from src.db.orm.bonus_links_orm import BonusLinksOrm
from src.db.orm.user_orm import UserORM
from src.utils.cached_user import _cached_user
from src.utils.logger import setup_logger
from src.scripts.queue.rabbit_queue import model
from src.utils.redis_cache.redis_cache import redis_manager

router = Router()
logger = setup_logger(__name__)


async def _check_bonus_link(message: types.Message, bonus_link: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–Ω–∞—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    key = f"{message.from_user.id}:{bonus_link}"
    check_activate = await redis_manager.get(key)

    if not check_activate:
        bonus_link = await BonusLinksOrm.use_bonus_link(link=bonus_link)
        if bonus_link:
            await message.answer(f"‚ùó–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ ‚ö°{float(bonus_link.energy_bonus)}")
            await UserORM.add_energy(message.from_user.id, float(bonus_link.energy_bonus))

            await redis_manager.set(key, value={"use": True})

async def _check_referral(message: types.Message):
    if len(message.text) < 7:
        await UserORM.create_user(
            message.from_user.id,
            username=message.from_user.username,
        )
        return

    logger.debug(f"All text {message.text}")
    referral_link = message.text.split(" ")[-1]

    if referral_link == "/start":
        await UserORM.create_user(
            message.from_user.id,
            username=message.from_user.username,
        )
        return

    if not referral_link.isdigit():
        await UserORM.create_user(
            message.from_user.id,
            username=message.from_user.username,
        )
        await _check_bonus_link(message, referral_link)
        return

    user = await UserORM.create_user(
        message.from_user.id,
        username=message.from_user.username,
        use_referral_link=int(referral_link),
    )
    logger.debug(user)

    if user.get("duplicate"):
        return

    owner = await UserORM.get_owner_referral(int(referral_link))

    if owner:
        await model.publish_message(
            queue_name="referral",
            user_id=owner.get("user_id"),
            text="‚ùó –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª–ª, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +20 ‚ö° —ç–Ω–µ—Ä–≥–∏–∏.",
        )
        await UserORM.add_energy(message.from_user.id, 20)


@router.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    try:
        logger.debug(message.text)
        await state.clear()

        user_id = message.from_user.id
        key = f"{user_id}:user"

        await _check_referral(message)
        check_user = await UserORM.get_user(user_id)
        logger.debug(check_user)

        if check_user:
            link = message.text.split(" ")[-1]
            if link == "/start":
                await _check_bonus_link(message, link)

        if not check_user:
            await _cached_user(key, user_id)

            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Woome AI üßû‚Äç\n\nÔ∏è"
                "‚ö° –í—ã –±–æ–Ω—É—Å–æ–º –ø–æ–ª—É—á–∏–ª–∏ 100 —ç–Ω–µ—Ä–≥–∏–∏ (10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò!\n"
                "üõ† –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n\n"
                "‚Ä¢ /text ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n"
                "‚Ä¢ /image ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n"
                "‚Ä¢ /profile ‚Äî –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
                "‚Ä¢ /invite ‚Äî –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤ Woome AI\n"
                "‚Ä¢ /premium ‚Äî üåü Premium –ø–æ–¥–ø–∏—Å–∫–∞ (+2500‚ö°)\n\n"
                "‚ÑπÔ∏è –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏? –û—Ç–∫—Ä–æ–π—Ç–µ /menu",
                parse_mode="Markdown",
                reply_markup=await main_menu_kb(),
            )
        else:
            user_info = await _cached_user(key, user_id)

            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Woome AI üßû‚Äç\n\nÔ∏è"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_info.get('energy')} ‚ö°\n"
                f"Premium –ø–æ–¥–ø–∏—Å–∫–∞: {"‚úÖ" if user_info.get('check_premium') else "‚ùå"} \n\n"
                "üõ† –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n\n"
                "‚Ä¢ /text ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n"
                "‚Ä¢ /image ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n"
                "‚Ä¢ /profile ‚Äî –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
                "‚Ä¢ /invite ‚Äî –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤ Woome AI\n"
                "‚Ä¢ /premium ‚Äî üåü Premium –ø–æ–¥–ø–∏—Å–∫–∞ (+2500‚ö°)\n\n"
                "‚ÑπÔ∏è –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏? –û—Ç–∫—Ä–æ–π—Ç–µ /menu",
                parse_mode="Markdown",
                reply_markup=await main_menu_kb(),
            )

    except Exception as e:
        logger.error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(Command("invite"))
async def invite_handler(message: types.Message):
    try:
        await message.answer(
            "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!\n"
            "üîπ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏:\n\n"
            "1) –º–≥–Ω–æ–≤–µ–Ω–Ω–æ +20 ‚ö°—ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n"
            "2) 180 ‚ÇΩ —Å –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ üí∞\n\n"
            "üî• –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äì —Ç–µ–º –±–æ–ª—å—à–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫!",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
                            callback_data="get_refferall_link",
                        )
                    ]
                ]
            ),
        )
    except Exception as e:
        logger.error(e)
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")


@router.callback_query(F.data == "get_refferall_link")
async def get_ref_link(callback: types.CallbackQuery):
    await callback.message.answer(
        f"–î–∞—Ä—é —Ç–µ–±–µ 20‚ö° —ç–Ω–µ—Ä–≥–∏–∏ –≤ –±–æ—Ç–µ, –≥–¥–µ –º–æ–∂–Ω–æ –±–µ–∑ VPN –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT –∏ Claude! –ó–∞–ø—É—Å–∫–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ: "
        f"https://t.me/{callback.message.from_user.username}?start={callback.from_user.id}",
    )


@router.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "üîπ –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n" "üëâ @WoomeSupport"
    )


@router.message(Command("menu"))
async def menu_command(message: types.Message):
    await message.answer(
        "üìú –ú–µ–Ω—é Woome AI\n\n"
        "üåü –° Premium –ø–æ–¥–ø–∏—Å–∫–æ–π ChatGPT –∏ Claude —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã!\n"
        "‚ö°+2500 —ç–Ω–µ—Ä–≥–∏–∏ –≤—Å–µ–≥–æ –∑–∞ 1490 ‚ÇΩ üëâ /premium\n\n"
        "–ó–æ–≤–∏ –¥—Ä—É–∑–µ–π ‚Äì –ø–æ–ª—É—á–∞–π +20‚ö° —ç–Ω–µ—Ä–≥–∏–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–∞ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö!\n"
        " üëâ /invite ‚Äî –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞\n\n"
        "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚Ä¢ /text ‚Äî –°–æ–∑–¥–∞–≤–∞–π —Ç–µ–∫—Å—Ç—ã —Å –ò–ò\n"
        "‚Ä¢ /image ‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ /profile ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —ç–Ω–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ /premium ‚Äî üåü –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
        "üí¨ –ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞? –í–≤–µ–¥–∏—Ç–µ /help"
    )
