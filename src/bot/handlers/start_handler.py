from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from src.bot.keyboards.main_menu import main_menu_kb
from src.db.orm.user_orm import UserORM
from src.utils.logger import setup_logger
from src.scripts.queue.rabbit_queue import model
from src.utils.redis_cache.redis_cache import redis_manager


router = Router()
logger = setup_logger(__name__)


@router.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    try:
        logger.debug(message.text)
        key = f"{message.from_user.id}:profile"

        if not await redis_manager.get(key):
            if message.text.find("="):
                await redis_manager.set(key, "profile")

                referral_link = message.text.split(" ")
                if referral_link[-1] != "/start":
                    user = await UserORM.create_user(
                        message.from_user.id, referral_link[-1]
                    )

                    if not user.get("duplicate"):
                        owner = await UserORM.get_owner_referral(referral_link[-1])

                        if owner:
                            await model.publish_message(
                                queue_name="referral",
                                user_id=owner.get("user_id"),
                                text="‚ùó –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª–ª, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +20 ‚ö° —ç–Ω–µ—Ä–≥–∏–∏.",
                            )
                            await UserORM.add_energy(message.from_user.id, 20)
                else:
                    await UserORM.create_user(message.from_user.id)

            else:
                await UserORM.create_user(message.from_user.id)
                await redis_manager.set(key, "profile")

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å:\n\n"
            "*ü§ñ –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã::*\n\n"
            "‚Ä¢ /text ‚Äî –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º. \n"
            "‚Ä¢ /image ‚Äî –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. \n"
            "‚Ä¢ /code ‚Äî –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º. \n"
            "\n*‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* \n\n"
            "‚Ä¢ /profile ‚Äî –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π \n"
            "‚Ä¢ /invite ‚Äî –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (+20üíé –≥–µ–Ω–µ—Ä–∞—Ü–∏–π) \n"
            "‚Ä¢ /bonus ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–µ–π—Ä–æ-–∫—É—Ä—Å (–¥–æ +70üíé –≥–µ–Ω–µ—Ä–∞—Ü–∏–π) \n"
            "‚Ä¢ /premium ‚Äî üåü Premium –ø–æ–¥–ø–∏—Å–∫–∞ (1000üíé –≥–µ–Ω–µ—Ä–∞—Ü–∏–π) \n\n"
            "/start ‚Äî –°–º–µ–Ω–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å",
            parse_mode="Markdown",
            reply_markup=await main_menu_kb(),
        )

        await state.clear()
    except Exception as e:
        logger.error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(Command("invite"))
async def invite_handler(message: types.Message, state: FSMContext, bot: Bot):
    try:
        referral_link = await UserORM.get_referral_link(message.from_user.id)
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏—à—å +20 ‚ö° –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏:\n"
            f"https://t.me/woome_bot?start={referral_link}",
        )

    except Exception as e:
        logger.error(e)
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
