from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from src.bot.keyboards.select_gpt import select_text_gpt, cancel_kb
from src.bot.states.text_state import TextState
from src.scripts.queue.rabbit_queue import model


router = Router()


@router.message(Command("text"))
@router.message(F.text == "üí° Chat GPT/Claude")
async def text_handler(message: types.Message, state: FSMContext):
    await message.answer(
        "–≠—Ç–∏ –ò–ò –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏, –ø–æ–º–æ—á—å –≤–∞–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é!\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        reply_markup=select_text_gpt(),
    )
    await state.set_state(TextState.type)


@router.callback_query(F.data.startswith("select_"), StateFilter(TextState.type))
async def select_gpt(callback: types.CallbackQuery, state: FSMContext):
    gpt_select = callback.data.replace("select_", "")
    await callback.message.delete()
    if gpt_select == "chat_gpt":
        energy_cost = 0.5
        select_model = "Chat GPT"
    elif gpt_select == "claude":
        energy_cost = 0.7
        select_model = "Claude"
    else:
        energy_cost = 1
        select_model = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"


    await state.update_data(type_gpt=gpt_select, energy_cost=energy_cost)

    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞—è –≤–∞–º–∏ –º–æ–¥–µ–ª—å - #{select_model}\n" 
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ‚ö°Ô∏è {energy_cost}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",

        reply_markup=cancel_kb(),
    )

    await state.set_state(TextState.text)


@router.message(F.text, StateFilter(TextState.text))
async def text_handler(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    text = message.text
    answer_message = await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")

    await model.publish_message(
        queue_name=data.get("type_gpt"),
        message=text,
        user_id=message.from_user.id,
        answer_message=answer_message.message_id,
        energy_cost=data["energy_cost"],
    )