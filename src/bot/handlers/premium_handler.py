from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.db.orm.config_orm import ConfigORM
from src.db.orm.user_orm import PremiumUserORM
from src.utils.cached_user import _cached_user, update_premium
from src.utils.generate_payment import generate_payment
from src.utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)
PRIVACY_POLICY = "https://gradov.online/ofertaneurokesh"


@router.message(Command("premium"))
async def premium_handle(message: types.Message):
    check_premium = await PremiumUserORM.is_premium_active(message.from_user.id)

    if check_premium:
        await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /profile")
    else:
        payment_link = await generate_payment(message.from_user.id)

        await message.answer(
            "üåü –û—Ñ–æ—Ä–º–∏ Premium –∏ –ø–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n\n"
            f"üîπ –ß—Ç–æ –¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å–∫–∞?\n"
            "‚úÖ ChatGPT –∏ Claude —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º–∏\n"
            "‚ö° +2 500 —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ò–ò\n"
            "üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "üîí –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –±—É–¥—É—â–µ–º\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 1490 —Ä—É–±–ª–µ–π –∑–∞ 1 –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)],
                ]
            ),
        )


@router.message(Command("subscription"))
async def subscription_settings(message: types.Message):
    check_premium = await PremiumUserORM.is_premium_active(message.from_user.id)

    if check_premium:
        user = await _cached_user(f"{message.from_user.id}:user", message.from_user.id)

        if user["check_premium"] != check_premium:
            await update_premium(user_id=message.from_user.id, premium=check_premium)

        await message.answer(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user['premium_to_date']}\n"
                             f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ' if user['settings']['auto_renewal'] else '‚ùå'}", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="sub_change_auto")],
            ]
        ))
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É -> /premium")

@router.callback_query(F.data == "sub_change_auto")
async def subscription_settings(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    await ConfigORM.change_config(
        auto_renewal=True,
        user_id=user_id,
    )

    check_premium = await PremiumUserORM.is_premium_active(user_id)
    user = await _cached_user(user_id=user_id)

    if user["check_premium"] != check_premium:
        await update_premium(user_id=user_id, premium=check_premium)

    if check_premium:

        await callback.message.edit_text(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user['premium_to_date']}\n"
                             f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ' if user['settings']['auto_renewal'] else '‚ùå'}",)
    else:
        await callback.message.answer("‚ùó–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–Ω–æ–ø–∫—É /premium")
