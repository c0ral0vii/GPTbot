from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.db.orm.config_orm import ConfigORM
from src.db.orm.user_orm import PremiumUserORM
from src.utils.cached_user import _cached_user, update_premium
from src.utils.generate_payment import generate_payment
from src.utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)
PRIVACY_POLICY = "https://gradov.online/ofertaneurokesh"

async def send_premium_offer(target: types.Message | types.CallbackQuery, payment_link: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ Premium –ø–æ–¥–ø–∏—Å–∫–µ."""
    text = (
        "üåü –û—Ñ–æ—Ä–º–∏ Premium –∏ –ø–æ–ª—É—á–∏ –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!\n\n"
        "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π ChatGPT –∏ Claude ‚Äì —Ä–∞–±–æ—Ç–∞–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚ö° +2500 —ç–Ω–µ—Ä–≥–∏–∏ ‚Äì –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
        "üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫, –≤—Å—ë –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
        "üîí –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äì —Ç–æ–ª—å–∫–æ –¥–ª—è PRO\n"
        "ü§ñ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º ‚Äì –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ç—Ä–µ–Ω–¥—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: <s>3000</s> <b>1490 ‚ÇΩ</b> / –º–µ—Å—è—Ü"
    )
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –ò –°–ù–Ø–¢–¨ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø", url=payment_link)],
        ]
    )

    if hasattr(target, 'message'): 
        await target.message.answer(text, parse_mode="HTML", reply_markup=reply_markup)
    else:  
        await target.answer(text, parse_mode="HTML", reply_markup=reply_markup)
        
        
@router.message(Command("PRO", "pro"))
async def premium_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /PRO."""
    await premium_handle(message)

@router.callback_query(F.data=="/PRO")
async def premium_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Premium."""
    await premium_handle(callback)

async def premium_handle(target: types.Message | types.CallbackQuery):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Premium."""
    check_premium = await PremiumUserORM.is_premium_active(target.from_user.id)

    if check_premium:
        text = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /profile"
        if hasattr(target, 'message'):
            await target.message.answer(text)
        else:  
            await target.answer(text)
    else:
        payment_link = await generate_payment(target.from_user.id)
        await send_premium_offer(target, payment_link)


@router.message(Command("subscription"))
async def subscription_settings(message: types.Message):
    check_premium = await PremiumUserORM.is_premium_active(message.from_user.id)

    if check_premium:
        user = await _cached_user(f"{message.from_user.id}:user", message.from_user.id)

        if user["check_premium"] != check_premium:
            await update_premium(user_id=message.from_user.id, premium=check_premium)

        await message.answer(
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user['premium_to_date']}\n"
            f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ' if user['settings']['auto_renewal'] else '‚ùå'}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                            callback_data="sub_change_auto",
                        )
                    ],
                ]
            ),
        )
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É -> /pro")


@router.callback_query(F.data == "sub_change_auto")
async def subscription_settings(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    user_config = await ConfigORM.change_config(
        auto_renewal=True,
        user_id=user_id,
    )

    check_premium = await PremiumUserORM.is_premium_active(user_id)
    user = await _cached_user(user_id=user_id)

    if user["check_premium"] != check_premium:
        await update_premium(user_id=user_id, premium=check_premium)

    if check_premium:
        await callback.message.edit_text(
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user['premium_to_date']}\n"
            f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ' if user_config.auto_renewal else '‚ùå'}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                            callback_data="sub_change_auto",
                        )
                    ],
                ]
            ),
        )
    else:
        await callback.message.answer(
            "‚ùó–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–Ω–æ–ø–∫—É /premium"
        )
