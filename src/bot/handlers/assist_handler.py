from aiogram import Router, F, types, Bot
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext

from src.bot.keyboards.select_gpt import get_models_dialogs, cancel_kb
from src.bot.states.text_state import GPTState
from src.config.config import EXCLUDE_PATTERN, settings
from src.db.orm.gpt_assistant_orm import GPTAssistantOrm
from src.bot.keyboards.gpt_assist_keyboard import gpt_assist_keyboard
from src.db.orm.user_orm import PremiumUserORM
from src.scripts.queue.rabbit_queue import model
from src.utils.redis_cache.redis_cache import redis_manager
from src.utils.text_scripts import _get_dialogs, _create_new_dialog, _get_dialog

router = Router()
ASSIST_START_TEXT = "–ù–∞—à–∏ —É–º–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–¥–µ–π –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏ –Ω–∞—á–Ω–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!"
NOT_FOUND_ASSIST_TEXT = (
    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ - /assistants"
)


@router.message(Command("assistants"))
@router.message(F.text == "üßë‚Äçüî¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã")
async def gpt_assist_handler(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä gpt assist"""

    assits = await GPTAssistantOrm.get_all_assistants()
    check_premium = await PremiumUserORM.is_premium_active(message.from_user.id)

    await message.answer(
        ASSIST_START_TEXT, reply_markup=await gpt_assist_keyboard(assits, check_premium)
    )
    await state.set_state(GPTState.assist)
    await state.update_data(
        premium=check_premium,
    )


@router.callback_query(F.data.startswith("assist_"), StateFilter(GPTState.assist))
async def select_gpt(callback: types.CallbackQuery, state: FSMContext):
    gpt_select = callback.data.replace("assist_", "")
    await callback.message.delete()
    data = await state.get_data()
    check_premium = data["premium"]
    if not check_premium:
        await callback.message.answer(
            "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É /premium"
        )
        return
    assist = await GPTAssistantOrm.get_select_assistants(int(gpt_select))

    if not assist or not assist.assistant_id or assist.disable:
        await callback.message.answer(
            NOT_FOUND_ASSIST_TEXT,
        )
        return

    energy_cost = assist.energy_cost

    priority = 0

    if check_premium:
        priority = 5
        energy_cost = 0

    await state.update_data(
        select_model=assist.title,
        energy_cost=float(energy_cost),
        type_gpt=assist.assistant_id,
        queue_select="gpt_assistant",
        priority=priority,
        comment=assist.comment if assist.comment else "-",
    )

    dialogs = await _get_dialogs(
        user_id=callback.from_user.id, select_model=assist.assistant_id
    )
    data = await state.get_data()
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω—ã–π –≤–∞–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - {assist.title}\n"
        f"{f"–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ‚ö°{data["energy_cost"]}" if data["energy_cost"] != 0 else ""}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=await get_models_dialogs(dialogs),
    )

    await state.set_state(GPTState.dialog)


@router.callback_query(F.data.startswith("dialog_"), StateFilter(GPTState.dialog))
async def select_dialog(callback: types.CallbackQuery, state: FSMContext):
    dialog_id = callback.data.replace("dialog_", "")
    user_id = callback.from_user.id
    await callback.message.delete()
    data = await state.get_data()

    if dialog_id == "new":
        dialog = await _create_new_dialog(
            user_id=callback.from_user.id, select_model=data["type_gpt"]
        )

        title = dialog.title
        await state.update_data(dialog_id=dialog.id)
    else:
        dialog = await _get_dialog(dialog_id=int(dialog_id))

        title = dialog.title
        await state.update_data(dialog_id=dialog_id)

    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω—ã–π –≤–∞–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç - {data["select_model"]}\n"
        f"{f"–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ‚ö°{data["energy_cost"]}" if data["energy_cost"] != 0 else ""}\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: {title}\n\n"
        f"–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {data["comment"]}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ",
        reply_markup=await cancel_kb(),
    )

    await state.set_state(GPTState.text)


@router.message(F.text.regexp(EXCLUDE_PATTERN), StateFilter(GPTState.text))
async def text_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()

    text = message.text
    key = f"{message.from_user.id}:generate"

    if await redis_manager.get(key):
        await message.delete()
        await message.answer("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return

    answer_message = await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")

    await model.publish_message(
        queue_name=data.get("queue_select"),
        dialog_id=int(data.get("dialog_id")),
        version=data.get("type_gpt"),
        message=text,
        user_id=message.from_user.id,
        answer_message=answer_message.message_id,
        energy_cost=data["energy_cost"],
        key=key,
        priority=data["priority"],
    )

    await redis_manager.set(key=key, value="generate", ttl=120)


@router.message(F.document, StateFilter(GPTState.text))
async def file_handler(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    data = await state.get_data()

    file_id = message.document.file_id
    file_name = message.document.file_name
    file = await bot.get_file(file_id)
    allowed_extensions = {".txt", ".csv", ".html"}
    if not any(file_name.endswith(ext) for ext in allowed_extensions):
        await message.answer("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt, .csv, .html!")
        return

    file_url = f"https://api.telegram.org/file/bot{settings.BOT_API}/{file.file_path}"
    answer_message = await message.answer(f"üìÇ –§–∞–π–ª `{file_name}` –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    await model.publish_message(
        queue_name=data.get("queue_select"),
        dialog_id=int(data.get("dialog_id")),
        version=data.get("type_gpt"),
        file={"url": file_url, "name": file_name, "type": "document"},
        user_id=message.from_user.id,
        answer_message=answer_message.message_id,
        energy_cost=data["energy_cost"],
        key=f"{message.from_user.id}:generate",
        priority=data["priority"],
    )